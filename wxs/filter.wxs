
/*  全局filter函数集合  */

/**
 * 切割字符串
 * @param {String} str - 含逗号字符串
 */
function splitString(str){ 
  if (str && typeof str == "string") {
    return str.split(",")[1]
  } else {
    return str;
  }
}

function formatDate (date, type){
  if (date == "" || date == null) {
    return;
  } else {
    var d = getDate(date);
    var newdate = "";
    if (type == "month") {
      newdate = d.getFullYear() + "-" + (d.getMonth() > 8 ? d.getMonth() + 1 : "0" + (d.getMonth() + 1));
    } else if (type == "time") {
      newdate = d.getFullYear() + '-'
        + (d.getMonth() > 8 ? d.getMonth() + 1 : "0" + (d.getMonth() + 1)) + '-'
        + (d.getDate() > 9 ? d.getDate() : "0" + (d.getDate()))
        + " " + (d.getHours() > 9 ? d.getHours() : "0" + d.getHours()) + ":"
        + (d.getMinutes() > 9 ? d.getMinutes() : "0" + d.getMinutes()) + ":"
        + (d.getSeconds() > 9 ? d.getMinutes() : "0" + d.getMinutes());
    } else {
      newdate = d.getFullYear() + '-'
        + (d.getMonth() > 8 ? d.getMonth() + 1 : "0" + (d.getMonth() + 1)) + '-'
        + (d.getDate() > 9 ? d.getDate() : "0" + (d.getDate()));
    }
    return newdate
  }
}

/**
 * 时间戳转日期格式
 * @param {number} timestamp - 时间戳
 * return 日期 eg: 2018-01-01 12:12:12
 */
function timestampToDate(timestamp){
  var date = getDate(timestamp)
  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()

}

/**
 * 截取手机号
 * @param {String} phone - 手机号
 */
function substrPhone(phone){
  if (phone) {
    var sPhone = phone.substring(0, 3) + '****' + phone.substring(7);
    return sPhone
  } else {
    return ''
  }
}

/**
 * 日期格式转化（2018-01-01 转 2018.01.01）
 */
function repalceLine(date){
  if(date){
    var reg = getRegExp("-", "g");
    return date.replace(reg, '.')
  }else{
    return date
  }
}

/**
 * 简历状态
 */
function parseStatus(status){
  switch (status) {
    case 1:
    case 2:
    case 3:
      return '已接收面试';
    case 6:
      return '淘汰';
    case 13:
      return '待接收面试';
    case 11:
    case 14:
    case 17:
      return '待筛选';
    default:
      break;
  }
}

/**
 * 根据出生日期计算年龄
 */
function gloBirthday(val){
  if (val && typeof val == "string") {
    var year = parseInt(val.substring(0, 4))
    var nowYear = getDate().getFullYear()
    return (nowYear - year) + "岁";
  }else if(val === null){
    return ''
  } else {
    return val;
  }
}

//学历的枚举值
function gloEducationLev(val){
  var educationLevs = ["博士", "研究生", 'MBA', '本科', '大专', '大学', '高中', '中专', '技校', '中技', '初中', '小学', '其他', '大专以下', '硕士']
  if (val > educationLevs.length || val < 1) {
    return '其他'
  } else {
    return educationLevs[val - 1]
  }
}

//婚姻的枚举值
function gloMarryStatus(val){
  var marryStatus = ["未婚", "已婚 ", '离异', '保密']
  if (val > marryStatus.length || val < 1) {
    return '保密'
  } else {
    return marryStatus[val - 1]
  }
}

//工作性质的枚举值
function gloWorkType(val){
  switch (val) {
    case 0:
    case 1:
      return "全职";
    case 2:
      return "兼职";
    case 3:
      return "实习";
    default:
      break;
  }
}

//时间过滤器,去掉时分秒
function substrDate(val){
  if (val && typeof val == "string") {
    var date = val.substring(0, 7)
    return date
  }else if(val === null){
    return ''
  } else {
    return val
  }
}

//提现状态
function applyStaus(val) {
  switch (val) {
    case 0:
      return "申请中";
    case 1:
      return "成功";
    case 2:
      return "失败";
    default:
      break;
  }
}

//截取详细地址中的城市
function getCity(val){
    if(val){
      var a = val.indexOf("省");
      var b = val.indexOf("市");
      if (b > -1){
        var city = val.substring(a+1,b+1);
        return city;
      }else{
        return ''
      }
    }else{
      return ''
    }
}

module.exports = {
  splitString: splitString,
  formatDate: formatDate,
  timestampToDate: timestampToDate,
  substrPhone:substrPhone,
  repalceLine: repalceLine,
  parseStatus:parseStatus,
  gloBirthday: gloBirthday,
  gloEducationLev: gloEducationLev,
  gloMarryStatus: gloMarryStatus,
  gloWorkType: gloWorkType,
  substrDate: substrDate,
  applyStaus: applyStaus,
  getCity: getCity
}